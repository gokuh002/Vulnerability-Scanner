import nmap
import requests
import argparse

def network_scan(target):
    nm = nmap.PortScanner()
    print(f"Scanning target: {target}...")
    nm.scan(target, '1-1024')
    for host in nm.all_hosts():
        print(f"Host: {host} ({nm[host].hostname()})")
        for proto in nm[host].all_protocols():
            lport = nm[host][proto].keys()
            for port in sorted(lport):
                state = nm[host][proto][port]['state']
                print(f"Port: {port}\tState: {state}")

def http_vuln_check(url):
    print(f"\nChecking {url} for HTTP vulnerabilities...")
    try:
        response = requests.get(url)
        headers = response.headers

        if 'X-Frame-Options' not in headers:
            print("Vulnerability: X-Frame-Options header not set! (Prone to Clickjacking)")
        else:
            print("X-Frame-Options header is set.")

        if 'X-XSS-Protection' not in headers:
            print("Vulnerability: X-XSS-Protection header not set! (Prone to XSS attacks)")
        else:
            print("X-XSS-Protection header is set.")

        if 'Content-Security-Policy' not in headers:
            print("Vulnerability: Content-Security-Policy header not set! (Prone to XSS attacks)")
        else:
            print("Content-Security-Policy header is set.")
        
        
        sql_injection_test(url)
        
        csrf_check(url)

    except requests.RequestException as e:
        print(f"Error checking {url}: {e}")

def sql_injection_test(url):
    payload = "' OR '1'='1"
    try:
        response = requests.get(url + f"?id={payload}")
        if "error" in response.text.lower() or response.status_code == 200:
            print("Potential SQL Injection vulnerability detected!")
        else:
            print("No SQL Injection vulnerability detected.")
    except requests.RequestException as e:
        print(f"Error checking for SQL Injection: {e}")

def csrf_check(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            if "csrf" not in response.text.lower():
                print("Potential CSRF vulnerability detected! (CSRF token not found)")
            else:
                print("CSRF protection appears to be in place.")
    except requests.RequestException as e:
        print(f"Error checking for CSRF: {e}")

parser = argparse.ArgumentParser(description="Basic Vulnerability Assessment Tool")
parser.add_argument("-t", "--target", help="IP Address or Domain to scan", required=True)
parser.add_argument("-u", "--url", help="Website URL to check HTTP vulnerabilities", required=True)
args = parser.parse_args()

network_scan(args.target)
http_vuln_check(args.url)
